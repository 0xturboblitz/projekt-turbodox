{
  "folderName": "display",
  "folderPath": ".autodoc/docs/json/src/display",
  "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/display",
  "files": [
    {
      "fileName": "FAQ.js",
      "filePath": "src/display/FAQ.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/display/FAQ.js",
      "summary": "The code in this file is primarily concerned with the display and management of a Frequently Asked Questions (FAQ) feature within the Moonolith project. It imports several dependencies from other modules, including view controls, image resources, GUI elements, and device controls.\n\nThe `FAQCatalog` object defines different layers of the FAQ view, each with a name, parallax effect, and starting position. The `displayFAQ` function is used to open the FAQ view, setting the FAQ type, zooming the view, and adjusting the GUI accordingly. If the device type is mobile, it also enables pan mode.\n\nThe `drawFAQ` function is responsible for rendering the FAQ view. It iterates over each layer in the `FAQCatalog`, calculates its position based on the parallax effect and current view position, and draws the corresponding image from the image catalog. If the layer is the FAQ layer, it also draws clouds. Finally, it draws the close button for the FAQ.\n\nThe `exitFAQ` function is used to close the FAQ view, resetting the view position and FAQ state.\n\nThe `drawClouds` function is a helper function used to draw cloud images onto the FAQ view. It iterates over the image catalog, skipping any images that are not of type 'cloud', calculates their position based on a parallax effect and the current view position, and draws them onto the view.\n\nHere's an example of how these functions might be used in the larger project:\n\n```javascript\nimport { displayFAQ, exitFAQ } from './FAQ';\n\n// Open the FAQ to the 'stars' section\ndisplayFAQ('stars');\n\n// ... user interacts with FAQ ...\n\n// Close the FAQ\nexitFAQ();\n```\n\nThis code would open the FAQ to the 'stars' section, allow the user to interact with it, and then close the FAQ when done.",
      "questions": "",
      "checksum": "fb7cb3179a9e4e23f5c429180378dc87"
    },
    {
      "fileName": "animations.js",
      "filePath": "src/display/animations.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/display/animations.js",
      "summary": "This code is responsible for managing animations in the Moonolith project. It imports various assets and constants, and defines an animation catalog (`animCatalog`) that contains information about each animation, such as its type, start position, whether it should be displayed and looped, its layer, and its base64 representation.\n\nThe `animFrameManager` function manages the frames of a given animation. It checks if the animation is of type 'intro' and if the intro state is false, it sets the display of the animation to false. It then sets a timeout to update the current frame of the animation. If the animation is set to loop, it resets the current frame to 0 and calls `animFrameManager` again.\n\nThe `launchAnim` function sets the display of a given animation to true and calls `animFrameManager` to start managing its frames.\n\nThe `updateAnimCatalog` function updates the x and y positions of each animation in the catalog based on the current view position and other constants. It also adjusts the positions of the 'postMonolith' and 'autourDuFeu' animations.\n\nThe `drawAnimations` function draws the current frame of each animation in the catalog that is set to display and is on the given layer. It calls the `drawFrame` function to draw each frame.\n\nThe `drawFrame` function creates an image data object from the current frame of the given animation and draws it on the animation's canvas. It then draws the animation's canvas on the given context at the animation's current position.\n\nThe `loadAnims` function initializes each animation in the catalog. It creates a canvas for each animation, sets its width and height, sets its parallax based on its layer, and sets its current frame to 0. If the animation is of type 'continual', it launches the animation. It also adjusts the start y position of the 'collision' animation.",
      "questions": "",
      "checksum": "a85d9ca2dd5b4f83bb8b169373dfe7b0"
    },
    {
      "fileName": "pointer.js",
      "filePath": "src/display/pointer.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/display/pointer.js",
      "summary": "The code in this file is primarily concerned with the manipulation of a data structure referred to as `monolithData`. This data structure appears to represent a monolith, a large structure within the Moonolith project. The main function, `addPointer`, modifies the `monolithData` based on the position of a pointer and the selected tool.\n\nThe `addPointer` function first checks if the device type is 'mobile'. If it is, the function immediately returns the unmodified `monolithData`. If the device is not mobile, the function proceeds to modify the `monolithData` based on the selected tool ('smol', 'medium', 'large', or 'giga') and the position of the pointer. The modification is done by calling the `whiten` function, which appears to lighten or \"whiten\" the specified area of the monolith.\n\nThe `whiten` function takes in the `monolithData` and coordinates (x, y). It first checks if the coordinates are within the valid range. If they are not, the function returns without making any changes. If the coordinates are valid, the function calculates the position on the monolith and checks if the area is editable. If it is, the function lightens the color of the specified area by increasing the RGB values.\n\nThis code could be used in the larger project to allow users to interact with the monolith, possibly as part of a drawing or editing feature. The different tools ('smol', 'medium', 'large', 'giga') likely correspond to different sizes or intensities of the editing effect.",
      "questions": "",
      "checksum": "ff3e9b0c2b2ca958da697444a25f4f0c"
    }
  ],
  "folders": [],
  "summary": "The `display` folder in the Moonolith project contains code that manages the display and interaction of various elements within the project, such as FAQs, animations, and a monolith structure.\n\nThe `FAQ.js` file manages the FAQ feature. It defines the FAQ view layers and controls the display, rendering, and exit of the FAQ view. For example, to open the FAQ to a specific section and then close it, you might use:\n\n```javascript\nimport { displayFAQ, exitFAQ } from './FAQ';\ndisplayFAQ('stars');\n// ... user interacts with FAQ ...\nexitFAQ();\n```\n\nThe `animations.js` file handles animations. It defines an animation catalog and functions to manage animation frames, launch animations, update animation positions, draw animations, and initialize animations. For instance, to launch an animation, you would use the `launchAnim` function.\n\nThe `pointer.js` file manipulates a data structure representing a monolith. The `addPointer` function modifies the monolith based on the position of a pointer and the selected tool, while the `whiten` function lightens a specified area of the monolith. This could be part of a feature allowing users to interact with the monolith, using different tools to create different effects.\n\nIn summary, the `display` folder contains code that controls various visual and interactive elements of the Moonolith project. It manages the display of FAQs and animations, and allows user interaction with a monolith structure.",
  "questions": "",
  "checksum": "4e83dd4e36c0b1e249e030449f0e4798"
}