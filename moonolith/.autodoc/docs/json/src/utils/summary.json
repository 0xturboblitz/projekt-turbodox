{
  "folderName": "utils",
  "folderPath": ".autodoc/docs/json/src/utils",
  "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/utils",
  "files": [
    {
      "fileName": "conversions.js",
      "filePath": "src/utils/conversions.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/utils/conversions.js",
      "summary": "The code in this file is primarily concerned with handling mouse interactions within the Moonolith project. It provides a set of utility functions that can be used to determine the position of the mouse within different contexts, such as within a grid, a circle, a square, or relative to a specific layer.\n\nThe `isInCircle` and `isInSquare` functions check if the mouse position is within a given circle or square, respectively. They first convert the mouse position to the coordinate system of a specified layer using the `convertToLayer` function, and then perform the geometric calculations. The `convertToLayer` function adjusts the coordinates based on the position of the specified layer, which can be an image, a GUI element, or an FAQ element.\n\nThe `mousePosInGrid` function calculates the mouse position within a grid. It first gets the position of the canvas element relative to the viewport, and then calculates the grid coordinates by subtracting the canvas position from the mouse position and dividing by the scale factor and pixel size.\n\nThe `convertToMonolithPos` function converts the mouse position to the coordinate system of the Monolith, which is a specific element within the project. It adjusts the coordinates based on the position and size of the Monolith, and returns `undefined` if the resulting position is outside the Monolith.\n\nThese functions can be used throughout the Moonolith project to handle mouse interactions with various elements, such as selecting an object, dragging and dropping, or hovering over an element to display a tooltip.",
      "questions": "",
      "checksum": "30c5adfd3698e4f391a3d76b91e4bcf9"
    }
  ],
  "folders": [],
  "summary": "The `utils` folder in the `json/src` directory of the Moonolith project contains utility functions for handling mouse interactions within the project. These functions are encapsulated in the `conversions.js` file.\n\nThe `conversions.js` file provides a set of utility functions that determine the position of the mouse within different contexts. For instance, the `isInCircle` and `isInSquare` functions check if the mouse position is within a given circle or square, respectively. They first convert the mouse position to the coordinate system of a specified layer using the `convertToLayer` function, and then perform the geometric calculations. \n\n```javascript\nif (isInCircle(mousePos, circleCenter, radius)) {\n  // Mouse is within the circle\n}\n```\n\nThe `mousePosInGrid` function calculates the mouse position within a grid. It first gets the position of the canvas element relative to the viewport, and then calculates the grid coordinates by subtracting the canvas position from the mouse position and dividing by the scale factor and pixel size.\n\n```javascript\nlet gridPos = mousePosInGrid(mousePos, canvasPos, scaleFactor, pixelSize);\n```\n\nThe `convertToMonolithPos` function converts the mouse position to the coordinate system of the Monolith, a specific element within the project. It adjusts the coordinates based on the position and size of the Monolith, and returns `undefined` if the resulting position is outside the Monolith.\n\n```javascript\nlet monolithPos = convertToMonolithPos(mousePos, monolithPos, monolithSize);\nif (monolithPos !== undefined) {\n  // Mouse is within the Monolith\n}\n```\n\nThese functions are essential for handling mouse interactions with various elements in the Moonolith project, such as selecting an object, dragging and dropping, or hovering over an element to display a tooltip. They provide a consistent way to handle mouse positions and interactions across different parts of the project.",
  "questions": "",
  "checksum": "c9abcbd45e4db6beef1107efea0bc1e2"
}