{
  "fileName": "imageManager.js",
  "filePath": "src/utils/imageManager.js",
  "url": "https://github.com/LaGuerrePiece/moonolith/src/utils/imageManager.js",
  "summary": "The code provided is a module that is part of the Moonolith project. It contains various functions and imports necessary for handling image animations and manipulating image data.\n\nThe code begins by importing several modules and dependencies, including `UPNG` from the `upmc` module, `runeNumber` from the `main` module, `Const` from the `constants` module, and various functions and variables from other modules within the `monolith` and `display` directories.\n\nThe `saveToEthernity` function is defined, which checks if the Metamask browser extension is present. If it is, the function converts the monolith image data to base64 format and passes it to the `chunkCreator` function. If Metamask is not present, the `displayFAQ` function is called to display a message to the user.\n\nThe `parseAPNG` function is defined, which imports multiple layers of animation by iterating over the `animCatalog` object and calling the `decodeAndFormatAnimation` function for each animation.\n\nThe `parsePNG` function is defined, which decodes a PNG image from base64 format to a buffer using the `ApngToBuffer` function.\n\nThe `decodeAndFormatAnimation` function is defined, which takes an index as input and retrieves the corresponding animation data from the `animCatalog` object. It decodes the animation from base64 format to a buffer using the `ApngToBuffer` function and assigns the decoded frames, delay times, width, and height to the animation object.\n\nThe `ApngToBuffer` function is defined, which takes a buffer as input and decodes it using the `UPNG.decode` function. It then converts the decoded buffer to RGBA8 format using the `UPNG.toRGBA8` function and extracts the frames, delay times, width, and height from the decoded buffer. The function returns an object containing the decoded frames and other information.\n\nThe `pngToBufferToRGBA8` function is defined, which takes a buffer as input and performs the same decoding and conversion steps as the `ApngToBuffer` function, but only returns the RGBA8 buffer.\n\nThe `pngToBufferToRGB` function is defined, which takes a buffer as input and performs the same decoding step as the `ApngToBuffer` function, but only returns the RGB buffer.\n\nThe `getWidthAndHeight` function is defined, which takes data as input and decompresses it using the `decompressFromUint8Array` function from the `lz-string` module. It then converts the decompressed data to a buffer using the `ethers.utils.arrayify` function and extracts the width and height information from the buffer.\n\nThe `bufferOnMonolith` function is defined, which takes data as input and performs various operations to draw pixels on the monolith. It first converts the base64 data to a buffer using the `base64ToBuffer` function. It then extracts the width and height information from the buffer and decodes the pixel array using the `decode4bitsArray` function. The function stores the chunk data in the `chunkStock` object and, if the chunk is eligible for animation, adds it to the `chunksToAnimateInfo` object. Finally, the function iterates over the pixel array and calls the `drawPixel` function to draw pixels on the monolith.\n\nThe `monolithToBase64` function is defined, which converts the monolith image data to base64 format. It retrieves the necessary data from the `gridToArray` function and constructs an object containing the position, ymax, number of pixels, and compressed image URI. The function returns this object.\n\nThe `bufferToBase64` function is defined, which takes a buffer as input and converts it to a base64 string.\n\nThe `saveLocally` function is defined, which takes a base64 string as input and creates a hidden link element with the base64 data as the href attribute. It then triggers a click event on the link element to initiate the download of the image.\n\nThe `base64ToBuffer` function is defined, which takes a base64 string as input and converts it to a buffer.\n\nThe `gridToArray` function is defined, which retrieves the high and low coordinates of the monolith image from the `getHighLow` function. It then iterates over the image grid and constructs an array of pixels, counting the number of pixels in the process. The function also creates a 24-bit pixel array for color saving purposes. The pixel array is then converted to a paletted format using the `rgbaToColorArray` function and encoded with 4 bits per color using the `encode4bitsArray` function. The function returns an object containing the high and low coordinates, number of pixels, paletted and 24-bit pixel arrays.\n\nThe `getHighLow` function is defined, which iterates over the monolith image grid and determines the highest and lowest coordinates of non-zero pixels. It calculates the width and height of the image based on these coordinates and returns an object containing the high and low coordinates, width, and height.\n\nThe `rgbaToColorArray` function is defined, which takes an array of RGBA values as input and converts it to an array of color indices based on the `PALETTE` constant.\n\nThe `addUintTo4bitArray` function is defined, which takes an array and a uint as input and adds the uint to the array, taking care of 4-bit encoding.\n\nThe `encode4bitsArray` function is defined, which takes an array of color indices as input and encodes it with 4 bits per color.\n\nThe `decode4bitsArray` function is defined, which takes an array of encoded color indices as input and decodes it to the original array of color indices.\n\nThe `importImage` function is defined, which creates an input element of type \"file\" and triggers a file selection event. When a file is selected, the function reads the file as an array buffer and converts it to base64 format. It then calls the `bufferOn",
  "questions": "1. **What does the `parseAPNG` function do?**\nThe `parseAPNG` function imports multiple layers of animation by decoding and formatting each animation using the `decodeAndFormatAnimation` function.\n\n2. **What is the purpose of the `ApngToBuffer` function?**\nThe `ApngToBuffer` function takes a buffer as input, decodes it using the UPNG library, and returns an object containing the decoded frames, delays, height, and width of the animation.\n\n3. **What is the purpose of the `bufferOnMonolith` function?**\nThe `bufferOnMonolith` function takes a data object as input and draws pixels on the monolith based on the provided coordinates and pixel data. It also stores the chunk data for use in animations and checks if the chunk should be animated."
}