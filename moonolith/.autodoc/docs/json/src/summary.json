{
  "folderName": "src",
  "folderPath": ".autodoc/docs/json/src",
  "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src",
  "files": [
    {
      "fileName": "constants.js",
      "filePath": "src/constants.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/constants.js",
      "summary": "The `Const` class in this file serves as a central repository for various constants and configuration values used throughout the Moonolith project. These constants include dimensions, colors, and other settings that are used to control the appearance and behavior of the application.\n\nThe class includes static getter methods for various properties such as `COLUMNS`, `LINES`, `MARGIN_TOP`, `MARGIN_BOTTOM`, `MARGIN_LEFT`, `MARGIN_RIGHT`, and others. These properties define the layout and dimensions of the application's interface. For example, `COLUMNS` and `LINES` define the size of the application's grid, while the `MARGIN_*` properties define the size of the margins around the grid.\n\nThe `setMonolithHeight` method allows the height of the monolith to be set dynamically. This could be used, for example, to adjust the size of the monolith based on user input or other factors.\n\nThe class also includes a series of color definitions in the form of RGB values. These colors are used throughout the application to ensure a consistent look and feel. The `PALETTE` and `GUI_PALETTE` properties return arrays of these colors, which could be used, for example, to populate a color picker in the application's interface.\n\nFinally, the `PARALLAX_LAYERS` and `PALETTE_INFO` properties provide configuration values for more complex features of the application. `PARALLAX_LAYERS` defines the behavior of different layers in a parallax scrolling effect, while `PALETTE_INFO` provides configuration values for different versions of the application's color palette.\n\nHere's an example of how these constants might be used in the application:\n\n```javascript\nimport Const from './Const';\n\n// Set the height of the monolith\nConst.setMonolithHeight(500);\n\n// Get the total number of lines in the grid\nlet totalLines = Const.LINES;\n\n// Get the color for the sky\nlet skyColor = Const.SKY_COLOR;\n```\n\nThis structure centralizes the configuration of the application, making it easier to manage and modify as the project evolves.",
      "questions": "",
      "checksum": "f9c184a5a37d83bddc5cde0ed0680941"
    },
    {
      "fileName": "intro.js",
      "filePath": "src/intro.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/intro.js",
      "summary": "The code in this file is primarily responsible for managing the introduction sequence of the Moonolith project. It imports various modules and functions from other files in the project, such as animations, images, controls, and display settings.\n\nThe `launchIntro` function is the main function that initiates the introduction sequence. It sets the initial view position, initializes the display, and triggers the 'collision' animation. It then changes the view position smoothly and launches a series of animations in sequence, each one waiting for the previous one to complete before starting. The function also handles the display of certain images at specific points in the sequence.\n\nThe `skipIntro` function allows the user to skip the introduction sequence. It hides certain animations and images, unlocks the scroll, and launches the 'autourDuFeu' animation. It also resets the view position to its initial state.\n\nThe `finalSkip` function is called at the end of the introduction sequence or when the user chooses to skip the intro. It hides the 'skipIntro' button, displays the 'faqButtonOpen' if it's the user's first time, toggles the music, unlocks the controls, and displays the 'panneau' and 'palette'.\n\nThe `monolithGoUpDuringIntro` function is responsible for creating an effect of the monolith rising during the introduction sequence. It increments the `monolithDisplayHeightIntro` variable over time, creating a visual effect of the monolith rising.\n\nThe `displayPanneau` function displays a panel with instructions for the user. It checks the user's browser language and displays the appropriate image. It also launches the 'panneauRainbow' animation and displays the 'panneauDecor' image.",
      "questions": "",
      "checksum": "46ad34702eb090ef5fe2ce09340ab1de"
    },
    {
      "fileName": "main.js",
      "filePath": "src/main.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/main.js",
      "summary": "The code in this file primarily handles the initialization and dynamic updates of a web application, presumably a visual display of a monolith structure. \n\nThe `initApp` function is the main entry point. It sets up the application's state and decides whether to launch an intro sequence or skip it based on the `firstTime` and `Opensea` variables. The `setRoute` function is used to parse the URL and set the `Opensea` and `runeNumber` variables, and also sets a cookie to track if the user has visited the site before.\n\nThe `chunkImport` and `importNewChunks` functions are responsible for fetching and processing \"chunks\" of data, which are then displayed on the monolith. These chunks are fetched from a Web3-based source, as indicated by the imported `getChunk`, `getMetaData`, and `getAllChunks` functions from `./utils/web3`. The chunks are then processed and displayed on the monolith using the `bufferOnMonolith` function.\n\nThe `setMonoHeightAndBuildIt` function fetches metadata, calculates the height of the monolith based on this metadata, and then builds the monolith using the `buildMonolith` function. It also initializes some visual elements with the `initClouds` function.\n\nThe code also sets up a recurring interval to call `importNewChunks` every 30 seconds, ensuring that the monolith display is kept up-to-date with the latest data.\n\n```javascript\nsetInterval(() => {\n    importNewChunks();\n}, 30000);\n```\n\nOverall, this code is responsible for initializing the application, fetching and processing data to be displayed on the monolith, and updating this display at regular intervals.",
      "questions": "",
      "checksum": "75767d5ebd7d7900f2370bda7976cd6e"
    }
  ],
  "folders": [
    {
      "folderName": "assets",
      "folderPath": ".autodoc/docs/json/src/assets",
      "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/assets",
      "files": [
        {
          "fileName": "sounds.js",
          "filePath": "src/assets/sounds.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/assets/sounds.js",
          "summary": "This code is responsible for managing the audio functionality in the Moonolith project. It handles the playing, pausing, and muting of two specific audio files, `theEndOfTheWorld.mp3` and `rumble.mp3`, as well as any other audio file specified by name.\n\nThe `toggleMute` function switches the mute state. If the audio is currently muted, it will play the music; if not, it will pause both the music and the rumble sound.\n\nThe `playSound` function plays a specified sound, but only if the system is not muted and a certain time limit has passed since the last sound was played. This prevents rapid, overlapping sound playback.\n\nThe `toggleMusic` function switches the music between playing and paused states, while `playMusic` simply plays the music.\n\nThe `stopSound` function pauses a specified sound.\n\nThe `toggleRumble` function switches the rumble sound between playing and fading out, unless the system is muted. The fading out is handled by the `fadeAudio` function, which gradually reduces the volume of the sound over a period of 5 seconds before pausing it.\n\nHere's an example of how to use these functions:\n\n```javascript\nimport { toggleMute, playSound, stopSound } from './audioManager';\n\n// Mute or unmute all sounds\ntoggleMute();\n\n// Play a sound named 'explosion', but only if at least 1000ms have passed since the last sound was played\nplaySound('explosion', 1000);\n\n// Stop the 'explosion' sound\nstopSound('explosion');\n```\n\nThis audio management functionality could be used in a variety of ways within the Moonolith project, such as providing background music, sound effects for user actions, or auditory feedback for system events.",
          "questions": "",
          "checksum": "7f67cc44937729b32a188760fc9fc160"
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/src/assets` folder in the Moonolith project contains the `sounds.js` file which is responsible for managing the audio functionality of the project. This includes playing, pausing, and muting audio files, specifically `theEndOfTheWorld.mp3` and `rumble.mp3`, as well as any other audio file specified by name.\n\nThe `sounds.js` file contains several functions that control the audio behavior:\n\n- `toggleMute`: Switches the mute state. If the audio is currently muted, it will play the music; if not, it will pause both the music and the rumble sound.\n- `playSound`: Plays a specified sound, but only if the system is not muted and a certain time limit has passed since the last sound was played. This prevents rapid, overlapping sound playback.\n- `toggleMusic`: Switches the music between playing and paused states.\n- `playMusic`: Simply plays the music.\n- `stopSound`: Pauses a specified sound.\n- `toggleRumble`: Switches the rumble sound between playing and fading out, unless the system is muted. The fading out is handled by the `fadeAudio` function, which gradually reduces the volume of the sound over a period of 5 seconds before pausing it.\n\nHere's an example of how to use these functions:\n\n```javascript\nimport { toggleMute, playSound, stopSound } from './audioManager';\n\n// Mute or unmute all sounds\ntoggleMute();\n\n// Play a sound named 'explosion', but only if at least 1000ms have passed since the last sound was played\nplaySound('explosion', 1000);\n\n// Stop the 'explosion' sound\nstopSound('explosion');\n```\n\nThis audio management functionality could be used in a variety of ways within the project, such as providing background music, sound effects for user actions, or auditory feedback for system events. It is a crucial part of the user experience, enhancing the interactivity and responsiveness of the project.",
      "questions": "",
      "checksum": "fe8e6cd806b07a35866d57847eb5dfb5"
    },
    {
      "folderName": "display",
      "folderPath": ".autodoc/docs/json/src/display",
      "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/display",
      "files": [
        {
          "fileName": "FAQ.js",
          "filePath": "src/display/FAQ.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/display/FAQ.js",
          "summary": "The code in this file is primarily concerned with the display and management of a Frequently Asked Questions (FAQ) feature within the Moonolith project. It imports several dependencies from other modules, including view controls, image resources, GUI elements, and device controls.\n\nThe `FAQCatalog` object defines different layers of the FAQ view, each with a name, parallax effect, and starting position. The `displayFAQ` function is used to open the FAQ view, setting the FAQ type, zooming the view, and adjusting the GUI accordingly. If the device type is mobile, it also enables pan mode.\n\nThe `drawFAQ` function is responsible for rendering the FAQ view. It iterates over each layer in the `FAQCatalog`, calculates its position based on the parallax effect and current view position, and draws the corresponding image from the image catalog. If the layer is the FAQ layer, it also draws clouds. Finally, it draws the close button for the FAQ.\n\nThe `exitFAQ` function is used to close the FAQ view, resetting the view position and FAQ state.\n\nThe `drawClouds` function is a helper function used to draw cloud images onto the FAQ view. It iterates over the image catalog, skipping any images that are not of type 'cloud', calculates their position based on a parallax effect and the current view position, and draws them onto the view.\n\nHere's an example of how these functions might be used in the larger project:\n\n```javascript\nimport { displayFAQ, exitFAQ } from './FAQ';\n\n// Open the FAQ to the 'stars' section\ndisplayFAQ('stars');\n\n// ... user interacts with FAQ ...\n\n// Close the FAQ\nexitFAQ();\n```\n\nThis code would open the FAQ to the 'stars' section, allow the user to interact with it, and then close the FAQ when done.",
          "questions": "",
          "checksum": "fb7cb3179a9e4e23f5c429180378dc87"
        },
        {
          "fileName": "animations.js",
          "filePath": "src/display/animations.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/display/animations.js",
          "summary": "This code is responsible for managing animations in the Moonolith project. It imports various assets and constants, and defines an animation catalog (`animCatalog`) that contains information about each animation, such as its type, start position, whether it should be displayed and looped, its layer, and its base64 representation.\n\nThe `animFrameManager` function manages the frames of a given animation. It checks if the animation is of type 'intro' and if the intro state is false, it sets the display of the animation to false. It then sets a timeout to update the current frame of the animation. If the animation is set to loop, it resets the current frame to 0 and calls `animFrameManager` again.\n\nThe `launchAnim` function sets the display of a given animation to true and calls `animFrameManager` to start managing its frames.\n\nThe `updateAnimCatalog` function updates the x and y positions of each animation in the catalog based on the current view position and other constants. It also adjusts the positions of the 'postMonolith' and 'autourDuFeu' animations.\n\nThe `drawAnimations` function draws the current frame of each animation in the catalog that is set to display and is on the given layer. It calls the `drawFrame` function to draw each frame.\n\nThe `drawFrame` function creates an image data object from the current frame of the given animation and draws it on the animation's canvas. It then draws the animation's canvas on the given context at the animation's current position.\n\nThe `loadAnims` function initializes each animation in the catalog. It creates a canvas for each animation, sets its width and height, sets its parallax based on its layer, and sets its current frame to 0. If the animation is of type 'continual', it launches the animation. It also adjusts the start y position of the 'collision' animation.",
          "questions": "",
          "checksum": "a85d9ca2dd5b4f83bb8b169373dfe7b0"
        },
        {
          "fileName": "pointer.js",
          "filePath": "src/display/pointer.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/display/pointer.js",
          "summary": "The code in this file is primarily concerned with the manipulation of a data structure referred to as `monolithData`. This data structure appears to represent a monolith, a large structure within the Moonolith project. The main function, `addPointer`, modifies the `monolithData` based on the position of a pointer and the selected tool.\n\nThe `addPointer` function first checks if the device type is 'mobile'. If it is, the function immediately returns the unmodified `monolithData`. If the device is not mobile, the function proceeds to modify the `monolithData` based on the selected tool ('smol', 'medium', 'large', or 'giga') and the position of the pointer. The modification is done by calling the `whiten` function, which appears to lighten or \"whiten\" the specified area of the monolith.\n\nThe `whiten` function takes in the `monolithData` and coordinates (x, y). It first checks if the coordinates are within the valid range. If they are not, the function returns without making any changes. If the coordinates are valid, the function calculates the position on the monolith and checks if the area is editable. If it is, the function lightens the color of the specified area by increasing the RGB values.\n\nThis code could be used in the larger project to allow users to interact with the monolith, possibly as part of a drawing or editing feature. The different tools ('smol', 'medium', 'large', 'giga') likely correspond to different sizes or intensities of the editing effect.",
          "questions": "",
          "checksum": "ff3e9b0c2b2ca958da697444a25f4f0c"
        }
      ],
      "folders": [],
      "summary": "The `display` folder in the Moonolith project contains code that manages the display and interaction of various elements within the project, such as FAQs, animations, and a monolith structure.\n\nThe `FAQ.js` file manages the FAQ feature. It defines the FAQ view layers and controls the display, rendering, and exit of the FAQ view. For example, to open the FAQ to a specific section and then close it, you might use:\n\n```javascript\nimport { displayFAQ, exitFAQ } from './FAQ';\ndisplayFAQ('stars');\n// ... user interacts with FAQ ...\nexitFAQ();\n```\n\nThe `animations.js` file handles animations. It defines an animation catalog and functions to manage animation frames, launch animations, update animation positions, draw animations, and initialize animations. For instance, to launch an animation, you would use the `launchAnim` function.\n\nThe `pointer.js` file manipulates a data structure representing a monolith. The `addPointer` function modifies the monolith based on the position of a pointer and the selected tool, while the `whiten` function lightens a specified area of the monolith. This could be part of a feature allowing users to interact with the monolith, using different tools to create different effects.\n\nIn summary, the `display` folder contains code that controls various visual and interactive elements of the Moonolith project. It manages the display of FAQs and animations, and allows user interaction with a monolith structure.",
      "questions": "",
      "checksum": "4e83dd4e36c0b1e249e030449f0e4798"
    },
    {
      "folderName": "monolith",
      "folderPath": ".autodoc/docs/json/src/monolith",
      "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/monolith",
      "files": [
        {
          "fileName": "monolithAnims.js",
          "filePath": "src/monolith/monolithAnims.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/monolith/monolithAnims.js",
          "summary": "The code in this file is primarily responsible for animating the monolith and its runes in the Moonolith project. It imports several dependencies, including constants, monolith data, and display parameters. It also exports two variables and two functions that can be used by other parts of the project.\n\nThe `animateMonolith` function is the main function in this file. It iterates over the `chunksToAnimateInfo` object and triggers the `animateRune` function for visible chunks. It also iterates over the `animatedPixels` Map and performs different animations based on the `transitionType` of each pixel. The animations include erasing, drawing, importing, and various types of rune animations. Each animation changes the color of the pixel over a certain number of steps, and ends the transition when the counter reaches a certain value.\n\nThe `draw` function changes the color of a pixel in the monolith. The `endTransition` function ends the transition of a pixel by drawing it with the final color and removing it from the `animatedPixels` Map. The `avg` function calculates the average color between a given color and the current color of a pixel in the monolith.\n\nThe `animateRune` function is triggered only once per rune. It displays the rune and starts a white-on-rune animation after a delay. It also starts a rune contour animation for each pixel in the rune.\n\nHere is an example of how to use the `animateMonolith` function:\n\n```javascript\nimport { animateMonolith } from './monolithAnimation';\n\n// Populate chunksToAnimateInfo and animatedPixels\n// ...\n\n// Animate the monolith\nanimateMonolith();\n```\n\nAnd here is an example of how to use the `animateRune` function:\n\n```javascript\nimport { animateRune } from './monolithAnimation';\n\n// Populate chunkStock and chunksToAnimateInfo\n// ...\n\n// Animate a rune with id 1\nanimateRune(1);\n```",
          "questions": "",
          "checksum": "b4be3551db9084215bd8825c8b3f7320"
        },
        {
          "fileName": "tools.js",
          "filePath": "src/monolith/tools.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/monolith/tools.js",
          "summary": "The code in this file is primarily responsible for managing the drawing tools in the Moonolith project. It provides functionality for selecting and using different tools, changing the color of the tools, and interacting with the canvas.\n\nThe `startUsingTool` function is the entry point for using a tool. It sets up the necessary event listeners on the canvas and determines which tool to use based on the mouse button pressed. The `useTool` function is called whenever the mouse is moved, and it draws on the canvas based on the current tool and color.\n\nThe `brushSwitch` and `selectBrush` functions allow for changing the current tool. The `brushSwitch` function cycles through the available tools, playing a sound each time the tool is changed. The `selectBrush` function allows for directly selecting a tool.\n\nThe `colorPicker` and `colorSwitch` functions manage the color of the tools. The `colorPicker` function picks a color from the canvas based on the mouse position. The `colorSwitch` function changes the current color based on the mouse button pressed and the color passed in.\n\nHere's an example of how these functions might be used:\n\n```javascript\nstartUsingTool(e, mousePos); // Start using a tool\nbrushSwitch(); // Switch to the next tool\nselectBrush('large'); // Select the 'large' tool\ncolorSwitch(e, 5); // Switch to color 5\n```\n\nThis code is crucial for the user interaction with the canvas in the Moonolith project. It allows for drawing on the canvas with different tools and colors, and provides feedback through sounds.",
          "questions": "",
          "checksum": "724a247a08aa40b2131131fc54fdf943"
        },
        {
          "fileName": "undoStack.js",
          "filePath": "src/monolith/undoStack.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/monolith/undoStack.js",
          "summary": "This code is part of a system that manages changes to a monolith, a large structure that is represented as a 2D array of pixels. The monolith can be modified by changing the color and z-index of its pixels. The code provides a way to track these changes and undo or redo them if necessary.\n\nThe changes are stored in two stacks: `eventStack` and `inverseEventStack`. Each item in these stacks is an event, which is a list of changes. A change is represented as an object with properties `x`, `y`, `oldColor`, and `oldZIndex`, which represent the pixel's coordinates, its previous color, and its previous z-index, respectively.\n\nThe `addToCurrentEvent` function is used to add a change to the current event. When an event is completed, the `closeCurrentEvent` function is called to push the current event to the `eventStack` and clear the current event and `inverseEventStack`.\n\nThe `undo` function pops the last event from the `eventStack`, applies the changes in reverse, and pushes the reversed changes to the `inverseEventStack`. The `redo` function does the opposite: it pops the last event from the `inverseEventStack`, applies the changes, and pushes them to the `eventStack`.\n\nFor example, if a pixel at (5, 5) was changed from red to blue, the change would be added to the current event with `addToCurrentEvent(5, 5, [255, 0, 0], 1)`. When the changes are done, `closeCurrentEvent` would be called. If the user wants to undo the change, they would call `undo()`, which would change the pixel back to red and add the change to the `inverseEventStack`. If they then call `redo()`, the pixel would be changed back to blue and the change would be added back to the `eventStack`.",
          "questions": "",
          "checksum": "8da434899cbcc73d96547b4655fac353"
        }
      ],
      "folders": [],
      "summary": "The `monolith` folder in the `src` directory of the Moonolith project contains JavaScript files that manage the animation, drawing tools, and undo/redo functionality for the monolith structure.\n\nThe `monolithAnims.js` file handles the animation of the monolith and its runes. It provides functions like `animateMonolith` and `animateRune` to animate the entire monolith or individual runes. These functions can be used as follows:\n\n```javascript\nimport { animateMonolith, animateRune } from './monolithAnimation';\n\n// Animate the monolith\nanimateMonolith();\n\n// Animate a rune with id 1\nanimateRune(1);\n```\n\nThe `tools.js` file manages the drawing tools for the project. It provides functions to start using a tool, switch between tools, and change the color of the tools. Here's an example of how these functions might be used:\n\n```javascript\nstartUsingTool(e, mousePos); // Start using a tool\nbrushSwitch(); // Switch to the next tool\nselectBrush('large'); // Select the 'large' tool\ncolorSwitch(e, 5); // Switch to color 5\n```\n\nThe `undoStack.js` file provides a system to track changes to the monolith and undo or redo them if necessary. It uses two stacks, `eventStack` and `inverseEventStack`, to store the changes. Here's an example of how these functions might be used:\n\n```javascript\naddToCurrentEvent(5, 5, [255, 0, 0], 1); // Add a change to the current event\ncloseCurrentEvent(); // Close the current event\nundo(); // Undo the last event\nredo(); // Redo the last undone event\n```\n\nThese files work together to provide a rich user experience for interacting with the monolith. They allow for animating the monolith, drawing on it with different tools and colors, and undoing or redoing changes.",
      "questions": "",
      "checksum": "39b7bf7bbe5ef16504157b1ef0d5f787"
    },
    {
      "folderName": "utils",
      "folderPath": ".autodoc/docs/json/src/utils",
      "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/utils",
      "files": [
        {
          "fileName": "conversions.js",
          "filePath": "src/utils/conversions.js",
          "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/utils/conversions.js",
          "summary": "The code in this file is primarily concerned with handling mouse interactions within the Moonolith project. It provides a set of utility functions that can be used to determine the position of the mouse within different contexts, such as within a grid, a circle, a square, or relative to a specific layer.\n\nThe `isInCircle` and `isInSquare` functions check if the mouse position is within a given circle or square, respectively. They first convert the mouse position to the coordinate system of a specified layer using the `convertToLayer` function, and then perform the geometric calculations. The `convertToLayer` function adjusts the coordinates based on the position of the specified layer, which can be an image, a GUI element, or an FAQ element.\n\nThe `mousePosInGrid` function calculates the mouse position within a grid. It first gets the position of the canvas element relative to the viewport, and then calculates the grid coordinates by subtracting the canvas position from the mouse position and dividing by the scale factor and pixel size.\n\nThe `convertToMonolithPos` function converts the mouse position to the coordinate system of the Monolith, which is a specific element within the project. It adjusts the coordinates based on the position and size of the Monolith, and returns `undefined` if the resulting position is outside the Monolith.\n\nThese functions can be used throughout the Moonolith project to handle mouse interactions with various elements, such as selecting an object, dragging and dropping, or hovering over an element to display a tooltip.",
          "questions": "",
          "checksum": "30c5adfd3698e4f391a3d76b91e4bcf9"
        }
      ],
      "folders": [],
      "summary": "The `utils` folder in the `json/src` directory of the Moonolith project contains utility functions for handling mouse interactions within the project. These functions are encapsulated in the `conversions.js` file.\n\nThe `conversions.js` file provides a set of utility functions that determine the position of the mouse within different contexts. For instance, the `isInCircle` and `isInSquare` functions check if the mouse position is within a given circle or square, respectively. They first convert the mouse position to the coordinate system of a specified layer using the `convertToLayer` function, and then perform the geometric calculations. \n\n```javascript\nif (isInCircle(mousePos, circleCenter, radius)) {\n  // Mouse is within the circle\n}\n```\n\nThe `mousePosInGrid` function calculates the mouse position within a grid. It first gets the position of the canvas element relative to the viewport, and then calculates the grid coordinates by subtracting the canvas position from the mouse position and dividing by the scale factor and pixel size.\n\n```javascript\nlet gridPos = mousePosInGrid(mousePos, canvasPos, scaleFactor, pixelSize);\n```\n\nThe `convertToMonolithPos` function converts the mouse position to the coordinate system of the Monolith, a specific element within the project. It adjusts the coordinates based on the position and size of the Monolith, and returns `undefined` if the resulting position is outside the Monolith.\n\n```javascript\nlet monolithPos = convertToMonolithPos(mousePos, monolithPos, monolithSize);\nif (monolithPos !== undefined) {\n  // Mouse is within the Monolith\n}\n```\n\nThese functions are essential for handling mouse interactions with various elements in the Moonolith project, such as selecting an object, dragging and dropping, or hovering over an element to display a tooltip. They provide a consistent way to handle mouse positions and interactions across different parts of the project.",
      "questions": "",
      "checksum": "c9abcbd45e4db6beef1107efea0bc1e2"
    }
  ],
  "summary": "The `json/src` folder in the Moonolith project contains the core JavaScript files that manage the application's functionality. The `constants.js` file acts as a central repository for various constants and configuration values used throughout the project. This includes dimensions, colors, and other settings that control the appearance and behavior of the application. The `intro.js` file manages the introduction sequence of the project, while the `main.js` file handles the initialization and dynamic updates of the web application.\n\nThe `assets` subfolder contains the `sounds.js` file which manages the audio functionality of the project. This includes playing, pausing, and muting audio files. The `display` subfolder contains code that manages the display and interaction of various elements within the project, such as FAQs, animations, and a monolith structure. The `monolith` subfolder contains JavaScript files that manage the animation, drawing tools, and undo/redo functionality for the monolith structure. The `utils` subfolder contains utility functions for handling mouse interactions within the project.\n\nFor example, to animate the monolith or individual runes, you would use the `animateMonolith` or `animateRune` functions from the `monolithAnims.js` file in the `monolith` subfolder:\n\n```javascript\nimport { animateMonolith, animateRune } from './monolithAnimation';\n\n// Animate the monolith\nanimateMonolith();\n\n// Animate a rune with id 1\nanimateRune(1);\n```\n\nTo handle mouse interactions with various elements in the project, you would use the utility functions from the `conversions.js` file in the `utils` subfolder:\n\n```javascript\nlet gridPos = mousePosInGrid(mousePos, canvasPos, scaleFactor, pixelSize);\nlet monolithPos = convertToMonolithPos(mousePos, monolithPos, monolithSize);\n```\n\nOverall, the `json/src` folder contains the core functionality of the Moonolith project, providing a rich user experience for interacting with the monolith, managing the display of FAQs and animations, and handling audio functionality.",
  "questions": "",
  "checksum": "22a1e25b254bca98539c4f0b8877f8f5"
}