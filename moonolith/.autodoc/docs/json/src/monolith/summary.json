{
  "folderName": "monolith",
  "folderPath": ".autodoc/docs/json/src/monolith",
  "url": "https://github.com/LaGuerrePiece/moonolith/tree/master/.autodoc/docs/json/src/monolith",
  "files": [
    {
      "fileName": "monolithAnims.js",
      "filePath": "src/monolith/monolithAnims.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/monolith/monolithAnims.js",
      "summary": "The code in this file is primarily responsible for animating the monolith and its runes in the Moonolith project. It imports several dependencies, including constants, monolith data, and display parameters. It also exports two variables and two functions that can be used by other parts of the project.\n\nThe `animateMonolith` function is the main function in this file. It iterates over the `chunksToAnimateInfo` object and triggers the `animateRune` function for visible chunks. It also iterates over the `animatedPixels` Map and performs different animations based on the `transitionType` of each pixel. The animations include erasing, drawing, importing, and various types of rune animations. Each animation changes the color of the pixel over a certain number of steps, and ends the transition when the counter reaches a certain value.\n\nThe `draw` function changes the color of a pixel in the monolith. The `endTransition` function ends the transition of a pixel by drawing it with the final color and removing it from the `animatedPixels` Map. The `avg` function calculates the average color between a given color and the current color of a pixel in the monolith.\n\nThe `animateRune` function is triggered only once per rune. It displays the rune and starts a white-on-rune animation after a delay. It also starts a rune contour animation for each pixel in the rune.\n\nHere is an example of how to use the `animateMonolith` function:\n\n```javascript\nimport { animateMonolith } from './monolithAnimation';\n\n// Populate chunksToAnimateInfo and animatedPixels\n// ...\n\n// Animate the monolith\nanimateMonolith();\n```\n\nAnd here is an example of how to use the `animateRune` function:\n\n```javascript\nimport { animateRune } from './monolithAnimation';\n\n// Populate chunkStock and chunksToAnimateInfo\n// ...\n\n// Animate a rune with id 1\nanimateRune(1);\n```",
      "questions": "",
      "checksum": "b4be3551db9084215bd8825c8b3f7320"
    },
    {
      "fileName": "tools.js",
      "filePath": "src/monolith/tools.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/monolith/tools.js",
      "summary": "The code in this file is primarily responsible for managing the drawing tools in the Moonolith project. It provides functionality for selecting and using different tools, changing the color of the tools, and interacting with the canvas.\n\nThe `startUsingTool` function is the entry point for using a tool. It sets up the necessary event listeners on the canvas and determines which tool to use based on the mouse button pressed. The `useTool` function is called whenever the mouse is moved, and it draws on the canvas based on the current tool and color.\n\nThe `brushSwitch` and `selectBrush` functions allow for changing the current tool. The `brushSwitch` function cycles through the available tools, playing a sound each time the tool is changed. The `selectBrush` function allows for directly selecting a tool.\n\nThe `colorPicker` and `colorSwitch` functions manage the color of the tools. The `colorPicker` function picks a color from the canvas based on the mouse position. The `colorSwitch` function changes the current color based on the mouse button pressed and the color passed in.\n\nHere's an example of how these functions might be used:\n\n```javascript\nstartUsingTool(e, mousePos); // Start using a tool\nbrushSwitch(); // Switch to the next tool\nselectBrush('large'); // Select the 'large' tool\ncolorSwitch(e, 5); // Switch to color 5\n```\n\nThis code is crucial for the user interaction with the canvas in the Moonolith project. It allows for drawing on the canvas with different tools and colors, and provides feedback through sounds.",
      "questions": "",
      "checksum": "724a247a08aa40b2131131fc54fdf943"
    },
    {
      "fileName": "undoStack.js",
      "filePath": "src/monolith/undoStack.js",
      "url": "https://github.com/LaGuerrePiece/moonolith/blob/master/src/monolith/undoStack.js",
      "summary": "This code is part of a system that manages changes to a monolith, a large structure that is represented as a 2D array of pixels. The monolith can be modified by changing the color and z-index of its pixels. The code provides a way to track these changes and undo or redo them if necessary.\n\nThe changes are stored in two stacks: `eventStack` and `inverseEventStack`. Each item in these stacks is an event, which is a list of changes. A change is represented as an object with properties `x`, `y`, `oldColor`, and `oldZIndex`, which represent the pixel's coordinates, its previous color, and its previous z-index, respectively.\n\nThe `addToCurrentEvent` function is used to add a change to the current event. When an event is completed, the `closeCurrentEvent` function is called to push the current event to the `eventStack` and clear the current event and `inverseEventStack`.\n\nThe `undo` function pops the last event from the `eventStack`, applies the changes in reverse, and pushes the reversed changes to the `inverseEventStack`. The `redo` function does the opposite: it pops the last event from the `inverseEventStack`, applies the changes, and pushes them to the `eventStack`.\n\nFor example, if a pixel at (5, 5) was changed from red to blue, the change would be added to the current event with `addToCurrentEvent(5, 5, [255, 0, 0], 1)`. When the changes are done, `closeCurrentEvent` would be called. If the user wants to undo the change, they would call `undo()`, which would change the pixel back to red and add the change to the `inverseEventStack`. If they then call `redo()`, the pixel would be changed back to blue and the change would be added back to the `eventStack`.",
      "questions": "",
      "checksum": "8da434899cbcc73d96547b4655fac353"
    }
  ],
  "folders": [],
  "summary": "The `monolith` folder in the `src` directory of the Moonolith project contains JavaScript files that manage the animation, drawing tools, and undo/redo functionality for the monolith structure.\n\nThe `monolithAnims.js` file handles the animation of the monolith and its runes. It provides functions like `animateMonolith` and `animateRune` to animate the entire monolith or individual runes. These functions can be used as follows:\n\n```javascript\nimport { animateMonolith, animateRune } from './monolithAnimation';\n\n// Animate the monolith\nanimateMonolith();\n\n// Animate a rune with id 1\nanimateRune(1);\n```\n\nThe `tools.js` file manages the drawing tools for the project. It provides functions to start using a tool, switch between tools, and change the color of the tools. Here's an example of how these functions might be used:\n\n```javascript\nstartUsingTool(e, mousePos); // Start using a tool\nbrushSwitch(); // Switch to the next tool\nselectBrush('large'); // Select the 'large' tool\ncolorSwitch(e, 5); // Switch to color 5\n```\n\nThe `undoStack.js` file provides a system to track changes to the monolith and undo or redo them if necessary. It uses two stacks, `eventStack` and `inverseEventStack`, to store the changes. Here's an example of how these functions might be used:\n\n```javascript\naddToCurrentEvent(5, 5, [255, 0, 0], 1); // Add a change to the current event\ncloseCurrentEvent(); // Close the current event\nundo(); // Undo the last event\nredo(); // Redo the last undone event\n```\n\nThese files work together to provide a rich user experience for interacting with the monolith. They allow for animating the monolith, drawing on it with different tools and colors, and undoing or redoing changes.",
  "questions": "",
  "checksum": "39b7bf7bbe5ef16504157b1ef0d5f787"
}