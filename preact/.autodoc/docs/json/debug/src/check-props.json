{
  "fileName": "check-props.js",
  "filePath": "debug/src/check-props.js",
  "url": "https://github.com/preactjs/preact/debug/src/check-props.js",
  "summary": "The code provided is a part of the Preact project and is responsible for type-checking the props of a component. It exports two functions: `resetPropWarnings` and `checkPropTypes`.\n\nThe `resetPropWarnings` function is used to reset the history of prop type warnings that have been logged. It sets the `loggedTypeFailures` object to an empty object, effectively clearing any previously logged warnings.\n\nThe `checkPropTypes` function is used to assert that the values passed to a component match the specified type specifications. It takes in several parameters:\n- `typeSpecs`: A map of prop names to their corresponding ReactPropTypes.\n- `values`: The runtime values that need to be type-checked.\n- `location`: A string indicating the location of the prop being checked (e.g., \"prop\", \"context\", \"child context\").\n- `componentName`: The name of the component being checked, used for error messages.\n- `getStack`: An optional function that returns the component stack.\n\nThe function iterates over each key in the `typeSpecs` object and attempts to execute the corresponding prop type function with the provided values. If an error occurs during the type checking, the error is caught and stored in the `error` variable. If the error message is not already present in the `loggedTypeFailures` object, it is added and a warning message is logged to the console using `console.error`. The warning message includes the location, the error message, and the component stack if `getStack` is provided.\n\nThis code is important in the larger Preact project as it helps ensure that components are receiving the correct types of props. By type-checking the props, it helps catch potential bugs and provides better error messages for developers. Here's an example of how this code might be used in a Preact component:\n\n```javascript\nimport { checkPropTypes } from 'Preact';\n\nfunction MyComponent(props) {\n  // Define the prop types for MyComponent\n  const propTypes = {\n    name: (props, propName, componentName) => {\n      if (typeof props[propName] !== 'string') {\n        return new Error(`Invalid prop ${propName} supplied to ${componentName}. Expected a string.`);\n      }\n    }\n  };\n\n  // Check the prop types\n  checkPropTypes(propTypes, props, 'prop', 'MyComponent', () => new Error().stack);\n\n  // Rest of the component code...\n}\n```\n\nIn this example, the `checkPropTypes` function is used to validate that the `name` prop is a string. If it's not, an error message is logged to the console. This helps catch potential issues early on and provides useful error messages for debugging.",
  "questions": "1. What is the purpose of the `resetPropWarnings` function?\n- The `resetPropWarnings` function is used to reset the history of which prop type warnings have been logged.\n\n2. Where is the `checkPropTypes` function adapted from?\n- The `checkPropTypes` function is adapted from the `checkPropTypes.js` file in the `prop-types` library by Facebook.\n\n3. What is the purpose of the `getStack` parameter in the `checkPropTypes` function?\n- The `getStack` parameter is an optional function that returns the component stack. It is used to provide additional information in error messages."
}